// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_credentials.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createCredentials = `-- name: CreateCredentials :one
INSERT INTO user_credentials (user_id, password_hash)
VALUES ($1, $2)
RETURNING id, user_id, password_hash, created_at, updated_at
`

type CreateCredentialsParams struct {
	UserID       uuid.NullUUID `json:"user_id"`
	PasswordHash string        `json:"password_hash"`
}

func (q *Queries) CreateCredentials(ctx context.Context, arg CreateCredentialsParams) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, createCredentials, arg.UserID, arg.PasswordHash)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCredentialsByUserId = `-- name: GetCredentialsByUserId :one
SELECT id, user_id, password_hash, created_at, updated_at
FROM user_credentials
WHERE user_id = $1
`

func (q *Queries) GetCredentialsByUserId(ctx context.Context, userID uuid.NullUUID) (UserCredential, error) {
	row := q.db.QueryRowContext(ctx, getCredentialsByUserId, userID)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
